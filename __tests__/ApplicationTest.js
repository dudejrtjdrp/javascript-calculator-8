import App from "../src/App.js";
import { MissionUtils } from "@woowacourse/mission-utils";

const mockQuestions = (inputs) => {
  MissionUtils.Console.readLineAsync = jest.fn();

  MissionUtils.Console.readLineAsync.mockImplementation(() => {
    const input = inputs.shift();
    return Promise.resolve(input);
  });
};

const getLogSpy = () => {
  const logSpy = jest.spyOn(MissionUtils.Console, "print");
  logSpy.mockClear();
  return logSpy;
};

describe("‚úÖ Í∏∞Î≥∏ Íµ¨Î∂ÑÏûê ÌÖåÏä§Ìä∏ (, :)", () => {
  test.each([
    ["1,2,3", "Í≤∞Í≥º : 6"],
    ["1,2:3", "Í≤∞Í≥º : 6"],
    ["1:2,3", "Í≤∞Í≥º : 6"],
    ["1:2:3", "Í≤∞Í≥º : 6"],
  ])("ÏûÖÎ†•: %s ‚Üí %s", async (input, expected) => {
    mockQuestions([input]);
    const logSpy = getLogSpy();
    const app = new App();
    await app.run();
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(expected));
  });
});

describe("‚úÖ Ïª§Ïä§ÌÖÄ Íµ¨Î∂ÑÏûê ÌÖåÏä§Ìä∏", () => {
  test.each([
    ["//;\n1;2;3", "Í≤∞Í≥º : 6"],
    ["//-\n10-20-30", "Í≤∞Í≥º : 60"],
  ])("ÏûÖÎ†•: %s ‚Üí %s", async (input, expected) => {
    mockQuestions([input]);
    const logSpy = getLogSpy();
    const app = new App();
    await app.run();
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(expected));
  });
});

describe("‚úÖ Ïª§Ïä§ÌÖÄ Î≥µÏû°Ìïú Íµ¨Î∂ÑÏûê ÌÖåÏä§Ìä∏", () => {
  test.each([
    ["//;\n1;2;3", "Í≤∞Í≥º : 6"],
    ["//-\n10-20-30", "Í≤∞Í≥º : 60"],
    ["//***\n1***2***3", "Í≤∞Í≥º : 6"],
    ["//@@@@\n1@@@@2@@@@3", "Í≤∞Í≥º : 6"],
    ["//---===---\n1---===---2---===---3", "Í≤∞Í≥º : 6"],
    ["//$$$$%%\n1$$$$%%2$$$$%%3", "Í≤∞Í≥º : 6"],
    ["//^^^&&&^^^\n1^^^&&&^^^2^^^&&&^^^3", "Í≤∞Í≥º : 6"],
    ["//<>><<>><>\n1<>><<>><>2<>><<>><>3", "Í≤∞Í≥º : 6"],
  ])("ÏûÖÎ†•: %s ‚Üí %s", async (input, expected) => {
    mockQuestions([input]);
    const logSpy = getLogSpy();
    const app = new App();
    await app.run();
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(expected));
  });
});

describe("‚úÖ Ïª§Ïä§ÌÖÄ Íµ¨Î∂ÑÏûê + Ïà´Ïûê Ï°∞Ìï©", () => {
  test.each([
    ["//3\n132333", "Í≤∞Í≥º : 27"],
    ["//2\n12234", "Í≤∞Í≥º : 46"],
    ["//1\n11112", "Í≤∞Í≥º : 113"],
    ["//4\n14244", "Í≤∞Í≥º : 7"],
  ])("ÏûÖÎ†•: %s ‚Üí %s", async (input, expected) => {
    mockQuestions([input]);
    const logSpy = getLogSpy();
    const app = new App();
    await app.run();
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(expected));
  });
});

describe("‚úÖ Ïª§Ïä§ÌÖÄ Íµ¨Î∂ÑÏûê + Í∞úÌñâ", () => {
  test.each([
    ["//\n\n1\n2\n3", "Í≤∞Í≥º : 6"],
    ["//\n3\n\n1\n3\n2\n3\n3", "Í≤∞Í≥º : 6"],
  ])("ÏûÖÎ†•: %s ‚Üí %s", async (input, expected) => {
    mockQuestions([input]);
    const logSpy = getLogSpy();
    const app = new App();
    await app.run();
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(expected));
  });
});

describe("‚úÖ Ïª§Ïä§ÌÖÄ Íµ¨Î∂ÑÏûê + Í∞úÌñâ + Ïà´Ïûê", () => {
  test("//\n3\n\n1\n3\n2\n3\n3 ‚Üí 6", async () => {
    mockQuestions(["//\n3\n\n1\n3\n2\n3\n3"]);
    const logSpy = getLogSpy();
    const app = new App();
    await app.run();
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining("Í≤∞Í≥º : 6"));
  });
});

test("Ïª§Ïä§ÌÖÄ Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©", async () => {
  const inputs = ["//;\\n1"];
  mockQuestions(inputs);

  const logSpy = getLogSpy();
  const outputs = ["Í≤∞Í≥º : 1"];

  const app = new App();
  await app.run();

  outputs.forEach((output) => {
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(output));
  });
});

test("Ïª§Ïä§ÌÖÄ Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©", async () => {
  // Ïª§Ïä§ÌÖÄ Íµ¨Î∂ÑÏûêÍ∞Ä Î¨∏ÏûêÏó¥Ïùº Îïå
  const inputs = ["//pp\\n1pp2"];
  mockQuestions(inputs);

  const logSpy = getLogSpy();
  const outputs = ["Í≤∞Í≥º : 3"];

  const app = new App();
  await app.run();

  outputs.forEach((output) => {
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(output));
  });
});

test("Ïª§Ïä§ÌÖÄ Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©", async () => {
  // Ïª§Ïä§ÌÖÄ Íµ¨Î∂ÑÏûêÍ∞Ä ÌäπÏàòÎ¨∏ÏûêÏùº Îïå
  const inputs = ["//*\\n1*2"];
  mockQuestions(inputs);

  const logSpy = getLogSpy();
  const outputs = ["Í≤∞Í≥º : 3"];

  const app = new App();
  await app.run();

  outputs.forEach((output) => {
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(output));
  });
});

test("Ïª§Ïä§ÌÖÄ Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©", async () => {
  // Íµ¨Î∂ÑÏûêÍ∞Ä Ïà´ÏûêÏùº Îïå
  const inputs = ["//3\\n13234"];
  mockQuestions(inputs);

  const logSpy = getLogSpy();
  const outputs = ["Í≤∞Í≥º : 7"];

  const app = new App();
  await app.run();

  outputs.forEach((output) => {
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(output));
  });
});
test("Ïª§Ïä§ÌÖÄ Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©", async () => {
  const inputs = ["//;\\n1"];
  mockQuestions(inputs);

  const logSpy = getLogSpy();
  const outputs = ["Í≤∞Í≥º : 1"];

  const app = new App();
  await app.run();

  outputs.forEach((output) => {
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(output));
  });
});
describe("‚ùå ÏòàÏô∏ Î∞è Ï¢ÖÎ£å ÌÖåÏä§Ìä∏", () => {
  test("Îπà Î¨∏ÏûêÏó¥ ‚Üí 0 Ï∂úÎ†•", async () => {
    mockQuestions([""]);
    const logSpy = getLogSpy();
    const app = new App();
    await app.run();
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining("Í≤∞Í≥º : 0"));
  });

  test("ÏùåÏàò ÏûÖÎ†• ‚Üí [ERROR]", async () => {
    mockQuestions(["-1,2,3"]);
    const app = new App();
    await expect(app.run()).rejects.toThrow("[ERROR]");
  });

  test("Î¨∏Ïûê Ìè¨Ìï® ‚Üí [ERROR]", async () => {
    mockQuestions(["1,a,3"]);
    const app = new App();
    await expect(app.run()).rejects.toThrow("[ERROR]");
  });

  test("ÏûòÎ™ªÎêú Ïª§Ïä§ÌÖÄ ÌòïÏãù ‚Üí [ERROR]", async () => {
    mockQuestions(["//;\n1;2,3"]);
    const app = new App();
    await expect(app.run()).rejects.toThrow("[ERROR]");
  });

  test("ÏòàÏô∏ ÌÖåÏä§Ìä∏", async () => {
    const inputs = ["-1,2,3"];
    mockQuestions(inputs);

    const app = new App();

    await expect(app.run()).rejects.toThrow("[ERROR]");
  });

  test("ÏòàÏô∏ ÌÖåÏä§Ìä∏", async () => {
    const inputs = ["//p\n1p2p//pp\\n1pp2"];
    mockQuestions(inputs);

    const app = new App();

    await expect(app.run()).rejects.toThrow("[ERROR]");
  });

  test("ÏòàÏô∏ ÌÖåÏä§Ìä∏", async () => {
    const inputs = ["//**\n1**2**//p\\n1p2"];
    mockQuestions(inputs);

    const app = new App();

    await expect(app.run()).rejects.toThrow("[ERROR]");
  });

  test("ÏòàÏô∏ ÌÖåÏä§Ìä∏", async () => {
    const inputs = ["//**\n1**2**//*\\n1*2"];
    mockQuestions(inputs);

    const app = new App();

    await expect(app.run()).rejects.toThrow("[ERROR]");
  });

  test("ÏòàÏô∏ ÌÖåÏä§Ìä∏", async () => {
    const inputs = ["////\n///\n"];
    mockQuestions(inputs);

    const app = new App();

    await expect(app.run()).rejects.toThrow("[ERROR]");
  });

  test("ÏòàÏô∏ ÌÖåÏä§Ìä∏", async () => {
    // Í≥µÎ∞±Î¨∏ÏûêÍ∞Ä ÏûàÏùÑÎïå
    const inputs = ["1,2,3, ''"];
    mockQuestions(inputs);

    const app = new App();

    await expect(app.run()).rejects.toThrow("[ERROR]");
  });

  test("ÏòàÏô∏ ÌÖåÏä§Ìä∏", async () => {
    // Îã§Î•∏ Î¨∏ÏûêÏó¥Ïù¥ Îì§Ïñ¥Í∞ÄÏûàÏùÑ ÎñÑ
    const inputs = ["1,2,3,;"];
    mockQuestions(inputs);

    const app = new App();

    await expect(app.run()).rejects.toThrow("[ERROR]");
  });

  test("ÏòàÏô∏ ÌÖåÏä§Ìä∏", async () => {
    // Ïà´Ïûê ÎÅùÏóê ÏÜåÏàòÏ†êÏù¥ Îì§Ïñ¥Í∞îÏùÑ Îïå
    const inputs = ["1,2,3."];
    mockQuestions(inputs);

    const app = new App();

    await expect(app.run()).rejects.toThrow("[ERROR]");
  });
});

describe("‚úÖ Ï†ïÍ∑úÏãù ÌäπÏàòÎ¨∏Ïûê - Ï†ïÏÉÅ Ï≤òÎ¶¨ÎêòÏñ¥Ïïº Ìï®", () => {
  test.each([
    ["//.\n1.2.3", "Í≤∞Í≥º : 6"],
    ["//*\n1*2*3", "Í≤∞Í≥º : 6"],
    ["//+\n1+2+3", "Í≤∞Í≥º : 6"],
    ["//?\n1?2?3", "Í≤∞Í≥º : 6"],
    ["//^\n1^2^3", "Í≤∞Í≥º : 6"],
    ["//$\n1$2$3", "Í≤∞Í≥º : 6"],
    ["//|\n1|2|3", "Í≤∞Í≥º : 6"],
    ["//[\n1[2[3", "Í≤∞Í≥º : 6"],
    ["//]\n1]2]3", "Í≤∞Í≥º : 6"],
    ["//(\n1(2(3", "Í≤∞Í≥º : 6"],
    ["//)\n1)2)3", "Í≤∞Í≥º : 6"],
    ["//{\n1{2{3", "Í≤∞Í≥º : 6"],
    ["//}\n1}2}3", "Í≤∞Í≥º : 6"],
    ["//\\\n1\\2\\3", "Í≤∞Í≥º : 6"],
  ])("ÏûÖÎ†•: %s ‚Üí %s", async (input, expected) => {
    mockQuestions([input]);
    const logSpy = getLogSpy();
    const app = new App();
    await app.run();
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(expected));
  });
});

describe("‚úÖ Îã§Ï§ë Î¨∏Ïûê Ìå®ÌÑ¥ - Ï†ïÏÉÅ Ï≤òÎ¶¨ÎêòÏñ¥Ïïº Ìï®", () => {
  test.each([
    ["//###\n1###2###3", "Í≤∞Í≥º : 6"],
    ["//ABCABC\n1ABCABC2ABCABC3", "Í≤∞Í≥º : 6"],
  ])("ÏûÖÎ†•: %s ‚Üí %s", async (input, expected) => {
    mockQuestions([input]);
    const logSpy = getLogSpy();
    const app = new App();
    await app.run();
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(expected));
  });
});

describe("‚úÖ ÌäπÏàò Î¨∏Ïûê Ï°∞Ìï© - Ï†ïÏÉÅ Ï≤òÎ¶¨ÎêòÏñ¥Ïïº Ìï®", () => {
  test.each([
    ["//!@#\n1!@#2!@#3", "Í≤∞Í≥º : 6"],
    ["//<>\n1<>2<>3", "Í≤∞Í≥º : 6"],
    ["//~`\n1~`2~`3", "Í≤∞Í≥º : 6"],
    ["//%^\n1%^2%^3", "Í≤∞Í≥º : 6"],
    ["//&*\n1&*2&*3", "Í≤∞Í≥º : 6"],
    ["//=+\n1=+2=+3", "Í≤∞Í≥º : 6"],
    ["//{}[]\n1{}[]2{}[]3", "Í≤∞Í≥º : 6"],
  ])("ÏûÖÎ†•: %s ‚Üí %s", async (input, expected) => {
    mockQuestions([input]);
    const logSpy = getLogSpy();
    const app = new App();
    await app.run();
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(expected));
  });
});

describe("‚úÖ Ïú†ÎãàÏΩîÎìú Î¨∏Ïûê - Ï†ïÏÉÅ Ï≤òÎ¶¨ÎêòÏñ¥Ïïº Ìï®", () => {
  test.each([
    ["//üòÄ\n1üòÄ2üòÄ3", "Í≤∞Í≥º : 6"],
    ["//Í∞Ä\n1Í∞Ä2Í∞Ä3", "Í≤∞Í≥º : 6"],
    ["//‰∏≠\n1‰∏≠2‰∏≠3", "Í≤∞Í≥º : 6"],
    ["//‚Ñ¢\n1‚Ñ¢2‚Ñ¢3", "Í≤∞Í≥º : 6"],
    ["//‚Ç¨\n1‚Ç¨2‚Ç¨3", "Í≤∞Í≥º : 6"],
    ["//¬∞\n1¬∞2¬∞3", "Í≤∞Í≥º : 6"],
  ])("ÏûÖÎ†•: %s ‚Üí %s", async (input, expected) => {
    mockQuestions([input]);
    const logSpy = getLogSpy();
    const app = new App();
    await app.run();
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(expected));
  });
});

describe("‚úÖ Í≥µÎ∞± Íµ¨Î∂ÑÏûê - Ï†ïÏÉÅ Ï≤òÎ¶¨ÎêòÏñ¥Ïïº Ìï®", () => {
  test.each([
    ["// \n1 2 3", "Í≤∞Í≥º : 6"],
    ["//  \n1  2  3", "Í≤∞Í≥º : 6"],
    ["// _ \n1 _ 2 _ 3", "Í≤∞Í≥º : 6"],
    ["//   \n1   2   3", "Í≤∞Í≥º : 6"],
  ])("ÏûÖÎ†•: %s ‚Üí %s", async (input, expected) => {
    mockQuestions([input]);
    const logSpy = getLogSpy();
    const app = new App();
    await app.run();
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(expected));
  });
});

describe("‚ùå Íµ¨Î∂ÑÏûêÏóê Ïà´Ïûê Ìè¨Ìï® - Ïò§Î•ò Î∞úÏÉùÌï¥Ïïº Ìï®", () => {
  test.each([["//3a\n13a23a3"], ["//7x\n17x27x37x4"]])(
    "ÏûÖÎ†•: %s ‚Üí [ERROR]",
    async (input) => {
      mockQuestions([input]);
      const app = new App();
      await expect(app.run()).rejects.toThrow("[ERROR]");
    }
  );
});

//ÏòàÏô∏Ï≤òÎ¶¨Ìï¥ÏïºÎêå
describe("‚ùå Í∞úÌñâ Î¨∏Ïûê ÌòºÌï© - Ïò§Î•ò Î∞úÏÉùÌï¥Ïïº Ìï®", () => {
  test("ÏûÖÎ†•: //\\n\\n\\n1\\n2\\n3 ‚Üí [ERROR]", async () => {
    mockQuestions(["//\n\n\n1\n2\n3"]);
    const app = new App();
    await expect(app.run()).rejects.toThrow("[ERROR]");
  });

  describe("‚ùå Ï§ëÏ≤© Íµ¨Î∂ÑÏûê ÏÑ†Ïñ∏ - Ïò§Î•ò Î∞úÏÉùÌï¥Ïïº Ìï®", () => {
    test.each([["//a\n1a2a//aa\n1aa2"], ["//;\n1;2;//;;\n1;;2"]])(
      "ÏûÖÎ†•: %s ‚Üí [ERROR]",
      async (input) => {
        mockQuestions([input]);
        const app = new App();
        await expect(app.run()).rejects.toThrow("[ERROR]");
      }
    );
  });

  describe("‚ùå Îπà Îç∞Ïù¥ÌÑ∞ / Í≤ΩÍ≥Ñ ÏºÄÏù¥Ïä§ - Ïò§Î•ò Î∞úÏÉùÌï¥Ïïº Ìï®", () => {
    test.each([
      ["//;\n"],
      ["//;\n;"],
      ["//;\n1;;2"],
      ["//;\n;1;2;"],
      ["//;\n;;;"],
    ])("ÏûÖÎ†•: %s ‚Üí [ERROR]", async (input) => {
      mockQuestions([input]);
      const app = new App();
      await expect(app.run()).rejects.toThrow("[ERROR]");
    });
  });


  describe("‚ùå ÌòºÌï© Íµ¨Î∂ÑÏûê - Ïò§Î•ò Î∞úÏÉùÌï¥Ïïº Ìï®", () => {
    test.each([["//|\n1|2/3"], ["//:\n1:2::3"]])(
      "ÏûÖÎ†•: %s ‚Üí [ERROR]",
      async (input) => {
        mockQuestions([input]);
        const app = new App();
        await expect(app.run()).rejects.toThrow("[ERROR]");
      }
    );
  });

  describe("‚ùå NULL Î∞îÏù¥Ìä∏ / Ï†úÏñ¥Î¨∏Ïûê - Ïò§Î•ò Î∞úÏÉùÌï¥Ïïº Ìï®", () => {
    test("ÏûÖÎ†•: NULL Î∞îÏù¥Ìä∏ Íµ¨Î∂ÑÏûê ‚Üí [ERROR]", async () => {
      const nullByteInput = "//\x00\n1\x00" + "2\x00" + "3";
      mockQuestions([nullByteInput]);
      const app = new App();
      await expect(app.run()).rejects.toThrow("[ERROR]");
    });

    test("ÏûÖÎ†•: Ïú†ÎãàÏΩîÎìú NULL Íµ¨Î∂ÑÏûê ‚Üí [ERROR]", async () => {
      mockQuestions(["//\u0000\n1\u00002"]);
      const app = new App();
      await expect(app.run()).rejects.toThrow("[ERROR]");
    });
  });

  // ÏòàÏô∏Ï≤òÎ¶¨Ìï¥ÏïºÎêå - Íµ¨Î∂ÑÏûêÍ∞Ä ! ÌïòÎÇòÏó¨ÎèÑ !! Îí§Ïóê ÎëêÍ∞úÎ∞òÎ≥µÎêòÏÑú Ïò§Î©¥ Ïù∏ÏßÄÎ•º Î™ªÌï®
  // //;;\n1;;2;;;;3
  // //abc\n1abc2abcabc3
  // //123\n112323123
  // Î∞õÏùÄ inputÏóêÏÑú //Îûë \nÏù¥Îûë Î™®Îì† delimiterÎ•º replaceAllÎ°ú Î∞îÍøîÏ§å
  // Í∑ºÎç∞ Ïà´ÏûêÎßå ÎÇ®ÎäîÍ≤å ÏïÑÎãàÎ©¥ throw errorÏñ¥Îñ∞?


  // //123\n112323123 ÏßÄÍ∏à ÏñòÎûë nullÎßå Î¨∏Ï†úÏûÑ Ïù¥Í±∞ Ìï¥Í≤∞Ìï¥ÏïºÎåê
  describe("‚ùå Î≥µÌï© Ïó£ÏßÄ ÏºÄÏù¥Ïä§ - Ïò§Î•ò Î∞úÏÉùÌï¥Ïïº Ìï®", () => {
    test.each([
      ["//--\n1--2--//--\n1--2"],
      ["//;;\n1;;2;;;;3"],
      ["//abc\n1abc2abcabc3"],
      ["//123\n112323123"],
      ["//..\n1..2....3"],
      ["//***\n1***2**3*4"],
    ])("ÏûÖÎ†•: %s ‚Üí [ERROR]", async (input) => {
      mockQuestions([input]);
      const app = new App();
      await expect(app.run()).rejects.toThrow("[ERROR]");
    });
  });
});
